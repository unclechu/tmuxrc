#! /usr/bin/env perl
# Author: Viacheslav Lotsmanov
# License: Public Domain https://raw.githubusercontent.com/unclechu/tmuxrc/master/LICENSE
use v5.10; use strict; use warnings; use autodie qw(:all);

use Env qw(HOME TMUX);
use Cwd qw(abs_path);
use List::Util qw(first);
use File::Spec qw(devnull);
use File::Basename qw(basename);
use IPC::System::Simple qw(runx capturex);

use constant APP => basename $0;
use constant WUT => 'Something unexpectedly went wrong…';

use constant CMD_LIST => qw(
	help
	cd gcd nocd gnocd
	sync nosync tsync
	3h 3v 4h 4v 6h 6v
	bar
	colors
	reconf
	rc
	gget
);

if (! defined($TMUX) || -z $TMUX) {
	say STDERR 'This app cannot be used outside of tmux session';
	exit 1;
}

sub get_usage {"Usage: @{[APP]} (@{[join '|', CMD_LIST]})"}

if (scalar(@ARGV) < 1) {
	say STDERR 'This app requires an argument';
	say STDERR get_usage;
	exit 1;
}

sub expand_cmd_by_prefix {
	my $partial = shift;
	die 'no cmd' unless defined $partial;
	my @matches = grep {$_ =~ /^$partial/} @_;

	if (scalar(@matches) == 1) {
		$matches[0]
	} else {
		say STDERR qq/Unknown command "$partial"/;

		say STDERR qq/Prefix "$partial" matches: /, join ', ', @matches
			if scalar(@matches) > 0;

		die 'unknown cmd'
	}
}

my $cmd = eval {expand_cmd_by_prefix shift, CMD_LIST};
if ($@) {say STDERR get_usage; exit 1}
my @cmd_pfx = (APP, $cmd);

sub wrong_cmd_args {
	my @args = do {my $x = shift; @{$x}};
	my $pfx = join ' ', @cmd_pfx;
	say STDERR qq/Incorrect arguments for `$pfx`: "@{[join ' ', @args]}"/;
	say STDERR "Usage: $pfx" . ((scalar(@_) > 0) ? (' ' . join ' ', @_) : '');
	exit 1;
}

sub expand_wrong_cmd_args {
	my $args = shift; # array by reference
	my $is_required = shift;
	my $partial = shift @{$args};
	my @cmd_list = @_;
	my @log_cmd_list = @cmd_list;

	if (!$is_required) {
		my $re = qr/^\*(.+)\*$/;

		unless (defined $partial) {
			$_ = first {/$re/} @cmd_list;
			if (defined) {s/$re/$1/; $partial = $_}
		}

		map {s/$re/$1/} @cmd_list;
	}

	my $cmd = (!$is_required && !defined $partial) ? undef :
		eval {expand_cmd_by_prefix $partial, @cmd_list};

	if ($@) {
		my $variants = join('|', @log_cmd_list);
		my @x = @{$args};
		unshift @x, $partial if defined $partial;
		wrong_cmd_args \@x, $is_required ? "($variants)" : "[($variants)]";
	}

	push @cmd_pfx, $cmd if defined $cmd;
	$cmd
}

sub get_sessions {
	my @sessions = split "\n", capturex qw(tmux ls);
	map {s/^([^:]+):.*$/$1/} @sessions;
	@sessions
}

sub set_env {
	my $is_global = shift;
	my $env_var_name = shift;
	my $env_var_value = shift;
	my @sessions = get_sessions;

	if ($is_global) {
		runx qw(tmux setenv -t), $_, '--', $env_var_name, $env_var_value
			for @sessions
	} else {
		runx qw(tmux setenv --), $env_var_name, $env_var_value
	}
}

# returns “undef” if value is not found
sub get_env {
	my $is_global = shift;
	my $env_var = shift;

	my $val;
	my @sessions = get_sessions;

	open ORIGINAL_STDERR, '<&STDERR';
	open STDERR, '>', File::Spec->devnull();
	chomp($val = eval {capturex qw(tmux showenv), '--', $env_var});
	open STDERR, '>&ORIGINAL_STDERR';
	$val =~ s/^$env_var=// if defined($val);

	if ($is_global) {
		my @sessions_where_not_found = ();

		for (@sessions) {
			open STDERR, '>', File::Spec->devnull();
			chomp(my $session_var_val = eval {
				capturex qw(tmux showenv -t), $_, '--', $env_var
			});
			open STDERR, '>&ORIGINAL_STDERR';
			$session_var_val =~ s/^$env_var=// if defined($session_var_val);

			if (!defined($val) && defined($session_var_val)) {
				$val = $session_var_val
			} elsif (!defined($session_var_val)) {
				push @sessions_where_not_found, $_
			}
		}

		if ((@sessions_where_not_found > 0) && defined($val)) {
			runx qw(tmux setenv -t), $_, '--', $env_var, $val for @sessions
		}
	}

	$val
}

sub unset_env {
	my $is_global = shift;
	my $env_var_name = shift;
	my @sessions = get_sessions;

	if ($is_global) {
		runx qw(tmux setenv -u -t), $_, '--', $env_var_name for @sessions
	} else {
		runx qw(tmux setenv -u --), $env_var_name
	}
}

sub reconf {runx qw(tmux source --), "$HOME/.tmux.conf"}

my %bar_env_var_map = (
	session     => '_TMUX_BAR_SESSION',
	socket      => '_TMUX_BAR_SOCKET',
	'pane-path' => '_TMUX_BAR_PANE_PATH',
);

my %bar_state_defaults = (
	session     => '1',
	socket      => '0',
	'pane-path' => '0',
);

sub get_last_bar_state {
	my $bar      = shift;
	my $prev_val = shift;

	$prev_val = get_env 1, ($bar_env_var_map{$bar} || die WUT)
		unless defined $prev_val;

	my $get_default = sub {
		die WUT unless exists $bar_state_defaults{$bar};
		$prev_val = $bar_state_defaults{$bar};
	};

	$get_default->() if $@;
	die WUT if $prev_val ne '1' && $prev_val ne '0' && $prev_val ne '';
	return $get_default->() if $prev_val eq '';
	($prev_val eq '1') ? '1' : '0';
}

use constant COLORS_ENV_VAR => '_TMUX_COLORS';
use constant COLORS_DEFAULT => 'dark';

sub get_last_colors_state {
	my $state = get_env 1, COLORS_ENV_VAR;
	$state = COLORS_DEFAULT unless defined $state;
	die WUT if $state ne 'dark' && $state ne 'light';
	$state
}

use constant CD_ENV_VAR => '_TMUX_CD';

if ($cmd eq 'help') {
	say get_usage;

} elsif (($cmd eq 'cd') || ($cmd eq 'gcd')) {
	wrong_cmd_args \@ARGV, '[DIRECTORY]' if scalar(@ARGV) > 1;
	my $dir;

	if (scalar(@ARGV) == 0) {
		say STDERR
			q/Received no directory value, /,
			q/interpreting this as HOME directory./;

		$dir = abs_path $HOME;
	} else {
		$dir = abs_path shift;
	}

	if (! -d $dir) {
		say STDERR
			qq/Cannot change directory to "$dir"/,
			q/ becuase it does not exists!/;

		exit 1
	}

	set_env +($cmd eq 'gcd'), CD_ENV_VAR, $dir

} elsif (($cmd eq 'nocd') || ($cmd eq 'gnocd')) {
	wrong_cmd_args \@ARGV if scalar(@ARGV) != 0;
	unset_env +($cmd eq 'gnocd'), CD_ENV_VAR

} elsif ($cmd eq 'reconf') {
	reconf;

} elsif ($cmd eq 'colors') {
	my $color = expand_wrong_cmd_args \@ARGV, 0, qw(dark light *toggle* show);

	if ($color eq 'show') {
		say get_last_colors_state;
		exit 0;
	}

	$color = (get_last_colors_state eq 'dark') ? 'light' : 'dark'
		if $color eq 'toggle';

	set_env 1, COLORS_ENV_VAR, $color;
	reconf;

} elsif ($cmd eq 'sync') {
	runx qw(tmux setw synchronize-panes on);

} elsif ($cmd eq 'nosync') {
	runx qw(tmux setw synchronize-panes off);

} elsif ($cmd eq 'tsync') { # toggle
	runx qw(tmux setw synchronize-panes);

} elsif (
	($cmd eq '3h') || ($cmd eq '3v') ||
	($cmd eq '4h') || ($cmd eq '4v') ||
	($cmd eq '6h') || ($cmd eq '6v')
) {

	wrong_cmd_args \@ARGV, 'SYNCHRONIZE-PANES'
		if (scalar(@ARGV) > 1) || ((scalar(@ARGV) == 1) && ($ARGV[0] ne '1'));

	my @preset
		= ($cmd eq '3h')
		? qw(sp -v ; sp -h ; selectp -t 1)

		: ($cmd eq '3v')
		? qw(sp -h ; sp -v ; selectp -t 1)

		: ($cmd eq '4h')
		? qw(sp -v ; sp -h ; selectp -t 1 ; sp -h ; selectp -t 1)

		: ($cmd eq '4v')
		? qw(sp -h ; sp -v ; selectp -t 1 ; sp -v ; selectp -t 1)

		: ($cmd eq '6h')
		? qw(
			sp -v ; sp -v
			; selectp -t 1 ; sp -h
			; selectp -t 3 ; sp -h
			; selectp -t 5 ; sp -h
			; resize-pane -t 1 -y 33%
			; resize-pane -t 2 -y 33%
			; resize-pane -t 3 -y 33%
			; resize-pane -t 4 -y 33%
			; resize-pane -t 5 -y 33%
			; resize-pane -t 6 -y 33%
			; selectp -t 1
		)

		: qw(
			sp -h ; sp -v ; sp -v
			; selectp -t 1 ; sp -v ; sp -v
			; resize-pane -t 1 -y 33% ; resize-pane -t 2 -y 33%
			; resize-pane -t 3 -y 33% ; resize-pane -t 4 -y 33%
			; resize-pane -t 5 -y 33% ; resize-pane -t 6 -y 33%
			; selectp -t 1
		);

	@preset = ('tmux', @preset);
	my $sync_panes = (scalar(@ARGV) == 1) ? shift : undef;

	unless (defined $sync_panes) {runx @preset}
	else {runx @preset, qw(; setw synchronize-panes)}

} elsif ($cmd eq 'bar') {
	my $bar    = expand_wrong_cmd_args \@ARGV, 1, qw(session socket pane-path);
	my $action = expand_wrong_cmd_args \@ARGV, 0, qw(*toggle* on off show);

	if ($action eq 'show') {
		say get_last_bar_state $bar;
		exit 0;
	}

	my $to_state = sub {
		return '1' if $action eq 'on';
		return '0' if $action eq 'off';

		return (get_last_bar_state($bar) eq '1') ? '0' : '1'
			if $action eq 'toggle';

		die WUT
	}->();

	my $env_var = $bar_env_var_map{$bar} || die WUT;
	say ((($to_state eq '1') ? "Showing '" : "Hiding '")."$bar' bar…");
	set_env 1, $env_var, $to_state;
	reconf;

} elsif ($cmd eq 'gget') {
	wrong_cmd_args \@ARGV, 'VAR-NAME'
		if (scalar(@ARGV) != 1) || ($ARGV[0] eq '');

	my $val = get_env 1, $ARGV[0];
	die "Variable “$ARGV[0]” is not found!" unless defined $val;
	say $val

} elsif ($cmd eq 'rc') {
	# helper for generating options for '.tmux.conf'

	my @commands = ();
	my $is_dark = (get_last_colors_state eq 'dark') ? 1 : 0;

	{
		my $wnd = $is_dark ?
			'bg=colour236,fg=colour187' : 'bg=colour254,fg=colour235';

		my $wnd_active = $is_dark ? 'bg=colour235' : 'bg=colour15';

		my @a = (qw(set -g @colors-solarized), ($is_dark ? 'dark' : 'light'));
		my @b = (qw(set -g window-style), $wnd);
		my @c = (qw(set -g window-active-style), $wnd_active);
		push @commands, \@a, \@b, \@c;
	}

	{
		my @a = (
			qw(set -g status-style),
			'bg=colour'.($is_dark ? 234 : 7).',fg=colour137,none'
		);

		my $windows_line_bg = $is_dark ? 'colour234' : 'colour7';
		my $date_time_fg    = $is_dark ? 'colour233' : 'colour254';

		my @b = (
			qw(set -g status-right),
			"#[bg=$windows_line_bg] "
				. "#[fg=$date_time_fg,bg=colour241,bold] %d/%m "
				. "#[bg=colour245] %H:%M:%S "
		);

		push @commands, \@a, \@b;
	}

	sub {
		my $get_last = sub {
			my $bar = shift;
			get_last_bar_state $bar, (get_env(1, $bar_env_var_map{$bar}) || '')
		};

		my $is_session_on = $get_last->('session');
		my $is_socket_on  = $get_last->('socket');
		my $is_pane_path  = $get_last->('pane-path');

		my @bars = do {
			@_ = ();
			push @_, 'session_name'      if $is_session_on;
			push @_, 'socket_path'       if $is_socket_on;
			push @_, 'pane_current_path' if $is_pane_path;
			@_
		};

		if (scalar(@bars) == 0) {
			my @a = qw(set -g status-left-length 0);
			my @b = (qw(set -g status-left), '');
			push @commands, \@a, \@b;
			return;
		}

		my $one_bar_max_len = 22;
		my $status_left_max_len = ($one_bar_max_len + 2) * scalar(@bars) + 1;

		{
			my @x = (qw(set -g status-left-length), $status_left_max_len);
			push @commands, \@x;
		}

		my $status = do {
			my $l   = $one_bar_max_len;
			my $fg  = $is_dark ? 'colour233' : 'colour254';
			my $bgw = $is_dark ? 'colour234' : 'colour7'; # windows list bg
			my $bg1 = 'colour245';
			my $bg2 = 'colour241';

			if (scalar(@bars) == 3) {
				"#[fg=$fg,bg=$bg1,bold] #{=-$l:$bars[0]} "
					. "#[bg=$bg2] #{=-$l:$bars[1]} "
					. "#[bg=$bg1] #{=-$l:$bars[2]} "
					. "#[bg=$bgw] "
			} elsif (scalar(@bars) == 2) {
				"#[fg=$fg,bg=$bg1,bold] #{=-$l:$bars[0]} "
					. "#[bg=$bg2] #{=-$l:$bars[1]} #[bg=$bgw] "
			} elsif (scalar(@bars) == 1) {
				my $bg3 = $is_dark ? $bg1 : $bg2;
				"#[fg=$fg,bg=$bg3,bold] #{=-$l:$bars[0]} #[bg=$bgw] "
			} else {die WUT}
		};

		my @x = (qw(set -g status-left), $status);
		push @commands, \@x;
	}->();

	{
		my $x = $is_dark;

		my @a = (
			qw(set -g message-style),
			'bold,bg=colour'.($x ? 245 : 234).',fg=colour'.($x ? 234 : 7)
		);

		my @b = (
			qw(set -g message-command-style),
			'bold,bg=colour'.($x ? 234 : 245).',fg=colour'.($x ? 7 : 234)
		);

		push @commands, \@a, \@b;
	}

	my @commands_union = do {
		@_ = 'tmux';
		push @_, ';', @{$_} for @commands;
		splice @_, 1, 1;
		@_
	};

	runx @commands_union;

} else {die WUT}
